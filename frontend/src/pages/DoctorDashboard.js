import React, { useState, useEffect } from "react";
import "./DoctorDashboard.css";
import api from "../api";
import { useNavigate } from "react-router-dom";


export default function DoctorDashboard() {
  const [patients, setPatients] = useState([]);
  const [search, setSearch] = useState("");
  const [showRegisterModal, setShowRegisterModal] = useState(false);
  const [showTreatModal, setShowTreatModal] = useState(false);
  const [predictionResult, setPredictionResult] = useState(null);
  const [hospitalOptions, setHospitalOptions] = useState([]);

  const [selectedEnvoy, setSelectedEnvoy] = useState("");

  const [registerForm, setRegisterForm] = useState({
    name: "",
    gender: "",
    phone: "",
    hadm_id: "",
  });

  const [treatForm, setTreatForm] = useState({
    envoy_id: "",
    subject_id: "",
    hadm_id: "",
    icd_code: "",
    icd_version: 10,
    seq_num: 1,
    diagnosis_count: 0,
    risk_level: 0,
  });

  useEffect(() => {
    fetchPatients();
    fetchHospitals();
  }, []);

  const fetchPatients = async () => {
    try {
      const res = await api.get("/api/patients");
      setPatients(res.data);
    } catch (err) {
      console.error("Failed to load patients:", err);
    }
  };

  const fetchHospitals = async () => {
    try {
      const res = await api.get("/list_envoys");
      setHospitalOptions(res.data);
    } catch (err) {
      console.error("Failed to load hospitals:", err);
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    const { hadm_id, ...payload } = registerForm; // omit hadm_id
    await api.post("/api/patients/register", payload);
    alert("Patient registered");
    setShowRegisterModal(false);
    setRegisterForm({ name: "", gender: "", phone: "", hadm_id: "" });
    fetchPatients();
  };

  const handleTreat = async (e) => {
    e.preventDefault();
   

    const envoy_id = treatForm.envoy_id;
    if (!envoy_id) {
      alert("Please select a hospital.");
      return;
    }

    const payload = {
      subject_id: null,  // ✅ Explicitly include it
      hadm_id: treatForm.hadm_id || null,    // ✅ Include hadm_id too if you want it autogenerated
      icd_code: treatForm.icd_code || null,
      icd_version: treatForm.icd_version,
      seq_num: treatForm.seq_num,
      diagnosis_count: treatForm.diagnosis_count,
      risk_level: treatForm.risk_level,
      created_at: new Date().toISOString(),
    };
    console.log("Submitting payload:", payload); 


    try {
      await api.post(`/envoy/${envoy_id}/add-diagnoses`, [payload]);
      alert("Diagnosis added successfully");
      setShowTreatModal(false);
      setTreatForm({
        envoy_id: "",
        subject_id: "",
        hadm_id: "",
        icd_code: "",
        icd_version: 10,
        seq_num: 1,
        diagnosis_count: 0,
        risk_level: 0,
      });
    } catch (err) {
      console.error("Failed to submit diagnosis:", err);
      alert("Error submitting diagnosis.");
    }
  };

  const handleUploadToS3 = async () => {
    if (!selectedEnvoy) {
      alert("Please select a hospital first.");
      return;
    }

    try {
      const res = await api.post(`/envoy/${selectedEnvoy}/export_diagnoses`);
      alert(`✅ Upload complete for ${res.data.message}\nFile: ${res.data.csv_s3_key}`);
    } catch (err) {
      console.error("Failed to upload to S3:", err);
      alert("❌ Failed to export diagnoses to S3.");
    }
  };


  const handleInfer = async (type) => {
    try {
      const res = await api.get(`/envoy/${selectedEnvoy}/inference/${type}`);
      setPredictionResult(res.data);
    } catch (err) {
      console.error("Inference failed:", err);
      alert("Failed to run inference");
    }
  };

  const filteredPatients = patients.filter((p) =>
    p.name?.toLowerCase().includes(search.toLowerCase())
  );


  const navigate = useNavigate();

  const handleLogout = () => {
    localStorage.removeItem("token"); // Adjust if using sessionStorage or cookies
    navigate("/login");
  };
  return (
    <div className="doctor-dashboard">
      <h2>Doctor Dashboard</h2>

      <button className="logout-button" onClick={handleLogout}>
        Logout
      </button>

      <div className="button-group">
        <button onClick={() => setShowRegisterModal(true)}>Register Patient</button>
        <button onClick={() => setShowTreatModal(true)}>Treat Patient</button>
        <button
          onClick={handleUploadToS3}
          disabled={!selectedEnvoy}
          title={selectedEnvoy ? "" : "Select a hospital to enable export"}
        >
          Upload Diagnoses to S3
        </button>
      </div>


      <div className="card">
        <h3>Run Inference</h3>

        <label>
          Select Hospital <br /><br />
          <select
            value={selectedEnvoy}
            onChange={(e) => setSelectedEnvoy(e.target.value)}
            required
          >
            <option value="">Choose a hospital</option>
            {hospitalOptions.map((h) => (
              <option key={h.id} value={h.id}>{h.name}</option>
            ))}
          </select>
        </label>

        <div style={{ marginTop: "10px", display: "flex", gap: "1rem" }}>
          <button onClick={() => handleInfer("global")}>Use Global Model</button>
          <button onClick={() => handleInfer("envoy-model")}>Use Hospital Model</button>
        </div>

        {predictionResult && (
          <div style={{ marginTop: "1rem" }}>
            <p><strong>Model Used:</strong> {predictionResult.model_used || "Global Model"}</p>
            <p><strong>Source:</strong> {predictionResult.source_csv}</p>
            <p><strong>Predictions:</strong></p>
            <ul>
              {predictionResult.predictions.map((pred, idx) => (
                <li key={idx}>
                  Subject {pred.subject_id}: <strong>{pred.predicted_risk}</strong> risk
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>

      <div className="card">
        <h3>Patients</h3>
        <input
          placeholder="Search by name..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
        <table className="patient-table">
          <thead>
            <tr>
              <th>Subject ID</th>
              <th>HADM ID</th>
              <th>Name</th>
              <th>Gender</th>
              <th>Phone</th>
            </tr>
          </thead>
          <tbody>
            {filteredPatients.map((p) => (
              <tr key={p.id}>
                <td>{p.subject_id || "-"}</td>
                <td>{p.hadm_id}</td>
                <td>{p.name}</td>
                <td>{p.gender || "-"}</td>
                <td>{p.phone || "-"}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>


      {/* Register Patient Modal */}
      {showRegisterModal && (
        <div className="modal">
          <form className="modal-form" onSubmit={handleRegister}>
            <h3>Register Patient</h3>
            <input
              placeholder="Full Name"
              value={registerForm.name}
              onChange={(e) => setRegisterForm({ ...registerForm, name: e.target.value })}
              required
            />
            <input
              placeholder="Gender"
              value={registerForm.gender}
              onChange={(e) => setRegisterForm({ ...registerForm, gender: e.target.value })}
              required
            />
            <input
              placeholder="Phone Number"
              value={registerForm.phone}
              onChange={(e) => setRegisterForm({ ...registerForm, phone: e.target.value })}
              required
            />
            <button type="submit">Register</button>
            <button
              type="button"
              className="cancel-btn"
              onClick={() => setShowRegisterModal(false)}
            >
              Cancel
            </button>
          </form>
        </div>
      )}

      {/* Treat Patient Modal */}
      {showTreatModal && (
        <div className="modal">
          <form className="modal-form" onSubmit={handleTreat}>
            <h3>Treat Patient</h3>

            <label>
              Hospital
              <select
                value={treatForm.envoy_id}
                onChange={(e) => setTreatForm({ ...treatForm, envoy_id: e.target.value })}
                required
              >
                <option value="">Select Hospital </option>

                {hospitalOptions.map((h) => (
                  <option key={h.id} value={h.id}>{h.name}</option>
                ))}
              </select>
            </label>

            <label>
              Subject ID (Auto-assigned)
              <input value={treatForm.subject_id} disabled />
            </label>

            <label>
              HADM ID (Required)
              <input
                value={treatForm.hadm_id}
                onChange={(e) => setTreatForm({ ...treatForm, hadm_id: e.target.value })}
                required
              />
            </label>

            <label>
              ICD Code
              <input
                placeholder="e.g. J18.9"
                value={treatForm.icd_code}
                onChange={(e) => setTreatForm({ ...treatForm, icd_code: e.target.value })}
              />
            </label>

            <label>
              ICD Version
              <input
                type="number"
                value={treatForm.icd_version}
                onChange={(e) => setTreatForm({ ...treatForm, icd_version: Number(e.target.value) })}
              />
            </label>

            <label>
              Sequence Number
              <input
                type="number"
                value={treatForm.seq_num}
                onChange={(e) => setTreatForm({ ...treatForm, seq_num: Number(e.target.value) })}
              />
            </label>

            <label>
              Diagnosis Count
              <input
                type="number"
                value={treatForm.diagnosis_count}
                onChange={(e) => setTreatForm({ ...treatForm, diagnosis_count: Number(e.target.value) })}
              />
            </label>

            <label>
              Risk Level (0 = Low, 1 = Medium, 2 = High)
              <input
                type="number"
                value={treatForm.risk_level}
                onChange={(e) => setTreatForm({ ...treatForm, risk_level: Number(e.target.value) })}
              />
            </label>

            <button type="submit">Submit Diagnosis</button>
            <button type="button" className="cancel-btn" onClick={() => setShowTreatModal(false)}>Cancel</button>
          </form>
        </div>
      )}
    </div>
  );
}
